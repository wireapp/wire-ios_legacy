opt_out_usage
default_platform(:ios)

platform :ios do

    desc "Fetch dependencies"
    lane :prepare do
        sh "cd .. && ./setup.sh"
    end


    desc "Build for testing"
    lane :build do
        scan(
            scheme: "Wire-iOS",
            build_for_testing: true,
            clean: true,
            devices: ["iPhone 7"],
            code_coverage: true,
            output_directory: "build",
            output_types: "junit",
            buildlog_path: "build",
            derived_data_path: "DerivedData",
            formatter: "xcpretty-json-formatter"
        )
    end

    desc "Test without building"
    lane :test do
        scan(
            scheme: "Wire-iOS",
            test_without_building: true,
            devices: ["iPhone 7"],
            code_coverage: true,
            buildlog_path: "test",
            derived_data_path: "DerivedData",
            output_types: "",
            fail_build: false
        )
        trainer(output_directory: "test")
    end

    desc "Run post-test tasks"
    lane :post_test do
        sh "curl -s https://codecov.io/bash > codecov"
        sh "chmod +x codecov"
        codecov = "./codecov -J '^Wire-iOS$' -D ../DerivedData -X xcodellvm"

        # When not running on CircleCI we need to supply more parameters to Codecov.io script
        if ENV["CIRCLECI"].nil?
            if ENV["CODECOV_TOKEN"].nil?
                UI.user_error! "codecov.io token missing for current repository. Set it in CODECOV_TOKEN environment variable"
            end
            current_branch = sh "git rev-parse --abbrev-ref HEAD"
            if current_branch.nil? || current_branch.empty?
                UI.user_error! "Cannot figure out current branch!"
            end
            current_commit = sh "git rev-parse --verify HEAD"
            if current_commit.nil? || current_commit.empty?
                UI.user_error! "Cannot figure out current commit!"
            end
            codecov << " -t #{ENV["CODECOV_TOKEN"]} -B #{current_branch.chomp} -C #{current_commit.chomp}"
        end
        sh codecov

        dependencies_url = ENV.fetch("DEPENDENCIES_BASE_URL") { "https://raw.githubusercontent.com/wireapp/wire-ios-shared-resources/master" }
        sh "curl -O #{dependencies_url}/Dangerfile"
        danger(
            dangerfile: "Fastlane/Dangerfile",
            github_api_token: ENV["GITHUB_ACCESS_TOKEN"]
        )
    end


end
